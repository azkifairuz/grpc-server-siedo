// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v4.25.3
// source: proto/presensi.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "presensi";

export interface Account {
  uuid: string;
  username: string;
  password: string;
  token: string;
}

export interface PresensiOfflineRequest {
  inLocation: boolean;
  account: Account | undefined;
}

export interface Activity {
  location: string;
  date: string;
  activity: string;
  time: string;
}

export interface PaginationData {
  page: number;
  size: number;
  totalPage?: number | undefined;
  totalData?: number | undefined;
}

export interface GetActivityRequest {
  page: number;
  filter: string;
  account: Account | undefined;
}

export interface GetActivityResponse {
  data: Activity[];
  pagination?: PaginationData | undefined;
  statusCode: number;
  message: string;
}

export interface IzinRequest {
  account: Account | undefined;
  reason: string;
  document: Uint8Array;
}

export interface BaseResponse {
  statusCode: number;
  message: string;
}

export const PRESENSI_PACKAGE_NAME = "presensi";

export interface PresensiServiceClient {
  presensiOffline(request: PresensiOfflineRequest): Observable<BaseResponse>;

  presensiOnline(request: Account): Observable<BaseResponse>;

  checkout(request: Account): Observable<BaseResponse>;

  izin(request: IzinRequest): Observable<BaseResponse>;

  getActivity(request: GetActivityRequest): Observable<GetActivityResponse>;
}

export interface PresensiServiceController {
  presensiOffline(request: PresensiOfflineRequest): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  presensiOnline(request: Account): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  checkout(request: Account): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  izin(request: IzinRequest): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  getActivity(
    request: GetActivityRequest,
  ): Promise<GetActivityResponse> | Observable<GetActivityResponse> | GetActivityResponse;
}

export function PresensiServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["presensiOffline", "presensiOnline", "checkout", "izin", "getActivity"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PresensiService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PresensiService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRESENSI_SERVICE_NAME = "PresensiService";
